#+TITLE: Easily Making CheatSheets with Org-mode
#+SUBTITLE: ---Reference Sheet for ‚ÄúWhat I'm Currently Learning‚Äù---
#+MACRO: blurb Pretty cheat sheets, or ‚Äúreference cards‚Äù, obtainable from Org-mode files. See section [[#getting-started]] below to get started making your own cheat sheets!
#+AUTHOR: [[http://www.cas.mcmaster.ca/~alhassm/][Musa Al-hassy]]
#+EMAIL: alhassy@gmail.com
#+INCLUDE: CheatSheetSetup.org
#+PROPERTY: header-args :results none
#+TODO: Todo | spacing LaTeX

:Dependencies:
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :config (require 'ox-extra)
          (ox-extras-activate '(ignore-headlines)))
#+END_SRC
:End:

* LaTeX Extra, Local, Setup  :ignore:

# Empty by default.
#+LATEX_HEADER: \def\cheatsheeturl{https://github.com/alhassy/CheatSheet}

# The following are the defaults & may be omitted.
#+LATEX_HEADER: \def\cheatsheetcols{2}
#+LATEX_HEADER: \landscapetrue
#+LATEX_HEADER: \def\cheatsheetitemsep{-0.5em}

# Example unicode declarations; see section ‚Äúunicode‚Äù below.
#+LATEX_HEADER: \newunicodechar{ùëª}{\ensuremath{T}}
#+LATEX_HEADER: \newunicodechar{‚äï}{\ensuremath{\oplus}}
#+LATEX_HEADER: \newunicodechar{‚âà}{\ensuremath{\approx}}

* Contents :TOC:QUOTE:ignore:
#+BEGIN_QUOTE
- [[#extra-local-setup][Extra, Local, Setup]]
- [[#project-goal][Project Goal]]
- [[#cheatsheet-examples][CheatSheet Examples]]
- [[#why-learn--relearn][Why Learn & Relearn?]]
- [[#getting-started][Getting Started]]
- [[#what-if-its-not-good-enough][What if it's not good enough?]]
- [[#what-if-i-want-n-columns-or-non-landscape-or-multiple-formats][What if I want ~N~ columns? Or non-landscape? Or multiple formats?]]
- [[#colourful-source-blocks][Colourful Source Blocks]]
- [[#break][break]]
- [[#basic-equational-support][Basic Equational Support]]
- [[#unicode][Unicode]]
- [[#parallel-environment][Parallel Environment]]
- [[#break-1][break]]
- [[#subsection-support][Subsection Support]]
  - [[#a-new-child-tree][A new child tree]]
  - [[#another-child-tree][Another child tree]]
- [[#making-readmeorg][Making ~README.org~]]
#+END_QUOTE

* COMMENT ~LaTeX~ commands ‚Ü¶ ~#+latex: \LaTeX~

  Execute the following block, with ~C-c C-c~ anywhere inside it,
  to hide all LaTeX specific items away so that, for example, the generated HTML
  does not show them.

  #+BEGIN_SRC emacs-lisp :results no
(defun my/replace-in-buffer (this that)
  "Replace every occurance of regexp ‚Äòthis‚Äô with ‚Äòthat‚Äô
   in the current buffer."
   (interactive)
   (save-excursion
    (beginning-of-buffer)
    (while (re-search-forward this nil t)
      (replace-match that)
    ))
)

;; Replace newline, any number of space, then room or vspace with a #+latex: beforehand.
(let (this that)
  (dolist (kp '( ( "^[ ]*\\\\room" . "#+latex: \\\\room")
         ( "^[ ]*\\\\vspace" . "#+latex: \\\\vspace")
         ( "^[ ]*\\\\newpage" . "#+latex: \\\\newpage")
         ( "^[ ]*\\\\columnbreak" . "#+latex: \\\\columnbreak")
         ))
    (setq this (car kp))
    (setq that (cdr kp))
    (my/replace-in-buffer this that)
   )
)
  #+END_SRC

  #+RESULTS:

* Project Goal

  #+latex:  \hspace{-12pt}
  /Use the elegant & intuitive Org-mode syntax to produce exquisite reference sheets./

    - For example, the boxed section headers here are produced from usual Org headers,
      as in ~* my section~; and one may use [[https://github.com/jkitchin/org-ref][org-ref]] for citations, as in nameref:name

    #+latex: \vspace{-1em}
    Read [[https://orgmode.org/worg/org-tutorials/org4beginners.html][Org-mode for beginners]] for a refresher!
    - For more see [[https://orgmode.org/orgguide.pdf][The Compact Org-mode Guide]].

  Execute ~C-c C-e l o~ or ~M-x compile~ to produce a nice looking PDF of your reference sheet.
  # \newline
  # I've bound the latter command to ~C-c C-m~ in [[https://github.com/alhassy/emacs.d][my Emacs setup]] ;-)

#+latex: \vspace{-0em}
#+begin_center
/To learn more, manipulating this source is the way to go!/
#+end_center

:Ignore:
#+latex: \vspace{1em}
Also, opening this file produces a ~README.md~ ;-)
Which can then be regenerated on-demand with ~f11~.
:End:

** COMMENT Org-mode Basics

 Read [[https://orgmode.org/worg/org-tutorials/org4beginners.html][Org-mode for beginners]] for a refresher!
   - For more see [[https://orgmode.org/orgguide.pdf][The Compact Org-mode Guide]].

 #+latex: \vspace{1em}

 + Reloading :: To reload a file with updated org settings, press
  ~C-c C-c~ on a settings line --i.e., one beginning with a ~#+~, to reset the
   temporary file cache.

 + Inclusion :: During export, you can include the content of another file.
   - Syntax: ~#+INCLUDE: "‚ü®fileName‚ü©" [‚ü®markup‚ü© [‚ü®language‚ü©]]~
     * ~markup ::= src | example~
     * ~language ::= C | haskell | emacs-lisp | ‚ãØ~
     * If the markup is not given, the text will be assumed to be in
       Org mode format and will be processed normally; c.f., [[https://orgmode.org/manual/In_002dbuffer-settings.html][Setup files]].

   - To visit the file, ~C-c '~ while the cursor is on the line with the file name.

   - Include only portions of a file by appending with ~:lines "x-y"~ where ~x~ is the first
     line and ~y~ is the second-to-last line. Also ~"-y"~ for upto but not including line ~y~,
     and ~"x-"~ for taking line ~x~ until the end of the file.
      # - Include portions of a file: https://orgmode.org/manual/Include-files.html

* CheatSheet Examples

Reference sheets created from this project include:
# latex: \vspace{1em}

+ [[https://github.com/alhassy/ElispCheatSheet][ElispCheatSheet]] :: Quick reference to the core language of Emacs
     ---Editor MACroS.
     # (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

+ [[https://github.com/alhassy/islam][Islam]] :: Important figures in the faith.

+ [[https://github.com/alhassy/PrologCheatSheet][PrologCheatSheet]] :: Program where everything is a relation ---i.e., a database table.

+ [[https://github.com/alhassy/CatsCheatSheet][CatsCheatSheet]] ::
  Listing of common theorems in elementary category theory.

+ [[https://github.com/alhassy/LatticesCheatSheet][LatticesCheatSheet]] ::
  Reference sheet for definitions and results in Lattice Theory.

+ [[https://github.com/alhassy/OCamlCheatSheet][OCamlCheatSheet]] :: Basics of OCaml, ‚Äúthe best imperative language‚Äù.

+ [[https://github.com/alhassy/CoqCheatSheet][CoqCheatSheet]] ::
  Reference sheet for the Coq language.

+ [[https://github.com/alhassy/GojuRyuCheatSheet][GojuRyuCheatSheet]] :: A quick cheat sheet for common terms in Goju Ryu Karate
     ---the hard-soft style of karate.

#+latex: \vspace{0.5em}
#+begin_center
/If you use this org-setup to produce a neat cheat sheet, please let me know!/
#+end_center


  #+latex: \vspace{-0.5em}
* Why Learn & Relearn?

  /The world of ideas is not revealed to us in one stroke;/
  /we must both permanently and unceasingly recreate it in/
  /our consciousness./ ---Rene Thom

# begin_center
# Why org-mode? To use org-babel tangle!
# end_center
#
I think org-mode is ideal for computing cheat sheets especially since it allows us
to use org-babel tangle to have small minimal working examples that go along with
the ideas.

#+begin_quote
/‚ÄòWhy‚Äô, said the Dodo, ‚Äòthe best way to explain it is to do it.‚Äô/
\newline ---Alice's Adventures in Wonderland
#+end_quote

  /A good stock of examples, as large as possible, is indispensable/
  /for a thorough understanding of any concept, and when I want to/
  /learn something new, I make it my first job to build one./ ---Paul Halmos

* Getting Started
:PROPERTIES:
:CUSTOM_ID: getting-started
:END:

To use this project for your own cheatsheets,
just copy-paste the following into, say, the
~*scratch*~ buffer then ~C-x C-e~ after the final closing parenthesis.

#+BEGIN_SRC emacs-lisp :tangle no
(let ((your-repo "~/example") ;; Alter this location!
      (enable-local-variables :all))
      ;; Look at my ‚Äúlocal variables‚Äù below; ensure nothing malicious.
      ;; So no need to be queried about loading them.

 ;; Obtain the submodule then make a /copy/ of this cheatsheet.
 (eshell-command (concat
   "  cd " your-repo
   "; git submodule add https://github.com/alhassy/CheatSheet.git"
   "; cp CheatSheet/CheatSheet.org ."
  ))

 ;; Make your cheat sheet refer to the submodule's setup file.
 (find-file-other-window (concat your-repo "/CheatSheet.org"))
 (beginning-of-buffer)
 (re-search-forward "INCLUDE: CheatSheetSetup.org" nil t)
 (replace-match "INCLUDE: CheatSheet/CheatSheetSetup.org")
 (beginning-of-buffer)
)

;; To remove a submodule:
;; git submodule deinit ‚ü™path_to_submodule‚ü´ ; git rm ‚ü™path_to_submodule‚ü´
#+END_SRC
# Testing purposes:
# (async-shell-command "rm -rf ~/delme; mkdir delme; cd delme; git init")

For the ~README.md~ to be generated as desired, fill in the macros ~URL~ and ~blurb~
at the top of this org file to point to your repository and provide a description
of what the cheatsheet serves to accomplish.

Keep your submodule up to date by running the following command from the parent
project ---i.e., your project.
#+BEGIN_SRC shell :tangle no
git submodule update
#+END_SRC

*Alternatively*:

0. Go to the repo where you want to make a cheat sheet.

1. Add this project as a submodule then copy its core to where you're working:
   #+BEGIN_SRC shell :tangle no
   git submodule add https://github.com/alhassy/CheatSheet.git
   ; cp CheatSheet/CheatSheet.org .
   ; cp CheatSheet/README.org .
   #+END_SRC

2. Open ~CheatSheet.org~ and locate ~#+INCLUDE: CheatSheetSetup.org~
   then rewrite ~CheatSheetSetup.org~ to ~CheatSheet/CheatSheetSetup.org~.

# git submodule add https://github.com/alhassy/CheatSheet.git ; cp CheatSheet/CheatSheet.org . ; cp CheatSheet/README.org .

* What if it's not good enough?

/‚ÄúThe person who thinks of doing something, is usually passed by the person doing it.‚Äù/

/The more that you read, the more things you will know./
/The more that you learn, the more places you'll go./
---Dr. Seuss

* What if I want ~N~ columns? Or non-landscape? Or multiple formats?

 At the top, say after the ~#+INCLUDE: CheatSheet/CheatSheetSetup.org~ line, add
 the following.

#+BEGIN_EXAMPLE org :tangle no
,#+LATEX_HEADER: \def\cheatsheetcols{N}
,#+LATEX_HEADER: \landscapefalse
#+END_EXAMPLE

For example, having three narrow columns is useful for term-heavy or formula heavy sheets.
In contrast, dense sheets may appear less daunting when rendered as single-column in portrait.
Sometimes a double-column portrait is more appropriate.

Press ~C-c C-c~ on the following incantation to produce a single column portrait of the cheat sheet.
#+name: make-portrait
#+BEGIN_SRC emacs-lisp :results none
(with-temp-buffer
    (insert
    "#+EXPORT_FILE_NAME: CheatSheet_Portrait.pdf
     ,#+LATEX_HEADER_EXTRA: \\landscapefalse \\def\\cheatsheetcols{1}
     ,#+INCLUDE: CheatSheet.org
    ")

    (let ((org-export-use-babel nil))
      (org-mode)
      (org-latex-export-to-pdf)
      )
)
#+END_SRC

* Colourful Source Blocks

  Invoke the following with ~C-c C-c~, or better yet place it in your [[https://alhassy.github.io/init/][Emacs configuration]],
  to ensure references are picked up and source code highlighting is turned on
  using the Minted package ---which in turn requires the pygmentize system tool.

#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -output-directory %o %f"
        "biber %b"
        "pdflatex -shell-escape -output-directory %o %f"
        "pdflatex -shell-escape -output-directory %o %f"))
#+END_SRC

For faster pdf generation, consider invoking:

#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process
      '("pdflatex -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

By default, Org exports LaTeX using the ~nonstopmode~ option,
which tries its best to produce a PDF
---which ignores typesetting errors altogether,
and therefore is not necessarily ideal when using LaTeX.

* spacing break                                                      :ignore:
#+latex: \columnbreak
* Basic Equational Support

# Basic name-formula equational support.

~\eqn{name}{formula}~
yields a displayed equation with ~formula~ left aligned and ~name~ right aligned:

#+latex: \vspace{-0.7em}
\eqn{name}{formula}
#+BEGIN_EXPORT latex
\eqn{Functoriality}{
  F(f_0 \circ \cdots \circ f_{n-1}) \;=\; F\, f_0 \circ \cdots \circ F\, f_{n-1}
  }
#+END_EXPORT

Moreover, we can refer to such a formula by invoking ~\ref{name}~ ---e.g., \ref{Functoriality} and \ref{name}.
However, if ~name~ involves unicode symbols, then this may cause problems.

See the [[https://github.com/alhassy/CatsCheatSheet][CatsCheatSheet]] for examples of this kind.

We may also use [[https://github.com/jkitchin/org-ref][org-ref]] style references, as in ~eqref:name~. However, org-ref may warn that
no context for the reference is found ---that's okay.

+ eqref   :: Parenthesised reference: eqref:name
+ autoref :: Prefix reference with type: autoref:name
+ nameref :: The name of the section that contains this reference: nameref:name

:MultipleEquationsExample:

preamble words here --below comes from CatsCheatSheet--

#+BEGIN_EXPORT latex
\begineqns

\eqn{$\langle\rangle$-Type}{f : C ‚Üí A \lands g : C ‚Üí B \impliesS ‚ü®f, g‚ü© : C ‚Üí A √ó B}

\eqn{$\langle\rangle$-Char}{ \fst ‚àò x = f \lands \snd ‚àò x = g \equivS x = ‚ü®f, g‚ü© }

\eqn{$\langle\rangle$-Cancellation; $\langle\rangle$-Self}{ \fst ‚àò ‚ü®f, g‚ü© = f \landS \snd ‚àò ‚ü®f, g‚ü© = g}

\eqn{$\langle\rangle$-Id}{ ‚ü®\fst, \snd‚ü© = \Id}

\eqn{$\langle\rangle$-Unique}{ \fst ‚àò x = \fst ‚àò y  \lands \snd ‚àò x = \snd ‚àò y \impliesS x = y}

\eqn{$\langle\rangle$-Fusion}{ ‚ü®f , g‚ü© ‚àò x = ‚ü®f ‚àò x , g ‚àò x‚ü© }

\eqn{$\langle\rangle$-Functor-Dist}{F \, ‚ü®f, g‚ü©_ùíû = ‚ü®F \, f , F \, g‚ü©_ùíü \qquad\text{ where } F : ùíû ‚Üí ùíü}

\endeqns
#+END_EXPORT

#+latex: \room
#+latex: \room

postamble words here

:End:

#+latex: \vspace{-3em}
* Unicode

I tend to use a lot of unicode and so this project comes with a unicode
style file. We may add additional support for unicode characters as follows.
#+BEGIN_EXAMPLE org
,#+LATEX_HEADER: \newunicodechar{‚äï}{\ensuremath{\oplus}}
#+END_EXAMPLE

Below we demonstrate that [[https://frama-c.com/][loops implement finite quantifications]]
by showing how the specification of a loop is implemented, unsurprisingly,
using a loop.

# latex: \vspace{0.3em}
A finite quantification can be defined axiomatically
by the empty-range rule and split-off term rules.
Together these form a recursive definition which can be phrased as a loop.
#
#+begin_parallel org
#+BEGIN_SRC c
// For _‚äï_ : ùëª ‚Üí ùëª ‚Üí ùëª,
// fold(A,a,b) ‚âà (‚äï x:a..b-1 ‚Ä¢ A[x])
/*@ axiomatic Fold {
  @
  @ logic ùëª
  @   fold{L}(ùëª *A, ‚Ñ§ a, ‚Ñ§ b)
  @   reads a,b,A, A[..] ;
  @
  @ axiom foldEmptyRange{L} :
  @   ‚àÄ ùëª *A, ‚Ñ§ a, b; a ‚â• b
  @   ‚áí  fold(A,a,b) ‚â° identity(‚äï);
  @
  @ axiom foldSplitOffTerm{L} :
  @   ‚àÄ ùëª *A, ‚Ñ§ a, b; a ‚â§ b
  @   ‚áí     fold(A, a, b+1)
  @        ‚â° fold(A, a, b  ) ‚äï A[b];
  @ }
  @*/
#+END_SRC
#+latex: \columnbreak
#+BEGIN_SRC c
/*@ requires \valid(A+(0..N-1));
  @ assigns \nothing;
  @ ensures \result ‚â° fold(A,0,N);
  @*/
ùëª fold(int N, ùëª* A) {

    ùëª total = identity(‚äï);

    /*@ loop invariant
             0 ‚â§ n ‚â§ N
          ‚àß  total ‚â° fold(A,0,n);
      @ loop assigns n, total;
      @ loop variant N - n;
    ,*/
    for(int n = 0; n != N; n++)
      total = total ‚äï A[n];
    return total;
}
#+END_SRC
#+end_parallel

#+latex: \vspace{-0.5em}

This pseudo-code is reified by giving concrete values
for ~(ùëª, ‚äï, identity)~ such as ~(int, +, 0)~ or ~(bool, ||, false)~.
Any [[https://en.wikipedia.org/wiki/Monoid][monoid]] will do.

# We can accomodate for multiple formats.
#+LATEX: \ifnum\cheatsheetcols=1 \newpage \else \fi

* Parallel Environment

Cheat sheets should not waste space, so the setup provides
a ~parallel~ LaTeX enviornment that takes an optional parameter
indicating how many columns are desired ---two by default.
Importantly, we use this environment as if it were any normal org-block:
#
#+begin_parallel org
#+BEGIN_EXAMPLE org :tangle no
,#‚∏≤
,#+begin_parallel org
???content here???
,#+end_parallel
#+END_EXAMPLE

The initial new line is important, otherwise the parallel environment
occurs in-line, which may not be the intended behaviour.
#+end_parallel

The column break is automatic, but as
this is sugar for a ~minipage~ containing a ~multicolum~ we can force a column
separation with ~\columnbreak~.
# This command, in Org, necessities newlines between
# the items being separated.

~parallelNB~ produces a side-by-side rendition with ‚ÄòN‚Äôo ‚ÄòB‚Äôar:
#
#+begin_parallelNB org
left \newline left \newline left

#+latex: \columnbreak
right \newline right \newline right
#+end_parallelNB

Here is an example with four columns:
#
#+ATTR_LATEX: :options [4]
#+begin_parallel org
left \newline left \newline left

#+latex: \columnbreak
middle \newline middle \newline middle

#+latex: \columnbreak
middle \newline middle \newline middle

#+latex: \columnbreak
right \newline right \newline right
#+end_parallel

Here is an example with three columns and ‚Äòn‚Äôo ‚Äòb‚Äôar:
#
#+begin_parallel3NB org
left \newline left \newline left

#+latex: \columnbreak
middle \newline middle \newline middle

#+latex: \columnbreak
right \newline right \newline right
#+end_parallel3NB

#+latex: \vfill {\color{white}.}

* spacing break :accomodating_multiple_formats:ignore:

#+LATEX: \ifnum\cheatsheetcols=1 \newpage \else \columnbreak \fi

* Subsection Support
  Ideally a cheat sheet is not too hierarchical and so a subsection, as in ~** child~,
  is turned into a rule as follows.

** A new child tree

  Here is the first child's content.


** Another child tree

  Here is the sibling's content.

* Making ~README.org~

  Evaluate the following source block with ~C-c C-c~
  to produce a ~README~ file.

  # :'( For some reason using {{{title}}} below would not work.

#+NAME: make-readme
#+BEGIN_SRC emacs-lisp
(with-temp-buffer
    (insert
    "#+EXPORT_FILE_NAME: README.org
     # HTML: <h1> Easily Making CheatSheets with Org-mode </h1>
     ,#+OPTIONS: toc:nil d:nil
     # Toc is displayed below at a strategic position.

     {{{blurb}}}

     :Hide:
     This project is to contain a listing of common results in X Theory.

     ,*The repo contains other articles I've written on X Theory;*
     ,*which may be read in a blog-format at:*
     https://alhassy.github.io/blog/categories/#Xtheory
     :End:

    ,*The listing sheet, as PDF, can be found
     [[file:CheatSheet.pdf][here]]*,
     or as a [[file:CheatSheet_Portrait.pdf][single column portrait]],
     while below is an unruly html rendition.

     # Markdown links: [title](target)

     This reference sheet is built from a
     [[https://github.com/alhassy/CheatSheet][CheatSheets with Org-mode]]
     system.

     ,#+TOC: headlines 2
     ,#+INCLUDE: CheatSheet.org
    ")

    ;; No code execution on export
    ;; ‚ü™ For a particular block, we use ‚Äú:eval never-export‚Äù ‚ü´
    ;;
    (let ((org-export-use-babel nil))
      (org-mode)
      ; (org-md-export-to-markdown)
      ; (package-install 'toc-org)
      (toc-org-mode)
      (toc-org-insert-toc)
      ; (setq org-toc-noexport-regexp ".*:ignore:.*") MA: Doesn't work.
      ; (delete "TOC" org-export-exclude-tags)
      (pop org-export-exclude-tags)
      (org-org-export-to-org)
      (add-to-list 'org-export-exclude-tags "TOC")
      )
)
#+END_SRC

Note that the ~blurb~ macro is defined by the user, to provide a terse description of the project.
   - Think the one-line statement at the top of a github repo page.

#    The ~d:nil~ ensures the ‚Äòdrawer‚Äô ~:Hide: ‚ãØ :End:~ is not exported; it's there for me
#    as a reminder.

* COMMENT Helper Elisp ---unused homemade version control :posterity:

#+BEGIN_QUOTE
This section provides a homemade version control interface
---preview with f7 then commit with f8--- which I no longer use.
Instead, I use magit and have bound f7, in my Emacs init file,
to produce PDFs by default.

To use these utilities, add to the ‚Äúfooter‚Äù below an eval for
(org-babel-load-file "CheatSheet/CheatSheet.org")
#+END_QUOTE

\hrule\room

The following utilities are loaded when this file is opened.
After the first time the file ~CheetSheet.el~ is created and this section
may be deleted. When you delete this section, ensure the ~load~ in the footer
below loads ~CheatSheet/CheatSheet.el~.

#+BEGIN_SRC emacs-lisp :tangle CheatSheet.el
;; preview
(defun my-org-latex-export-to-pdf ()
  "Produce a PDF from the CheatSheet then show it via the OS's PDF viewer."

  (interactive)
  (async-shell-command  (concat "open " (org-latex-export-to-pdf)))
)

(local-set-key (kbd "<f7>") 'my-org-latex-export-to-pdf)

;; commit
(local-set-key (kbd "<f8>") '(lambda () (interactive)
  (shell-command
     (format "git commit CheatSheet.org CheatSheet.pdf -m \"CheatSheet: %s\""
     (read-string "Commit Message for CheatSheet: ")))
))
#+END_SRC

* COMMENT footer

0. The first ‚Äúeval‚Äù below is convenience matter
   that should be loaded whenever CheatSheet.org is opened.

1. The second ‚Äúeval‚Äù makes a README for the repo, whenever the file is opened,
   and is then bound to ~f11~ for convenience.

2. Likewise, the third eval is for making a portrait form of the cheatsheet ---~f12~.

3. :TOC: should not be exported in this file.

   See https://github.com/snosov1/toc-org for more on toc-org.

   (add-to-list 'org-export-exclude-tags "TOC")
   (delete "TOC" org-export-exclude-tags)

    And every time you'll be saving an org file, the first headline with a :TOC:
    tag will be updated with the current table of contents.
    (toc-org-enable)

# Local Variables:
# eval: (progn (visual-line-mode t) (require 'ox-extra) (ox-extras-activate '(ignore-headlines)))
# eval: (local-set-key (kbd "<f11>") '(lambda () (interactive) (org-babel-goto-named-src-block "make-readme") (org-babel-execute-src-block) (outline-hide-sublevels 1)))
# eval: (local-set-key (kbd "<f12>") '(lambda () (interactive) (org-babel-goto-named-src-block "make-portrait") (org-babel-execute-src-block) (outline-hide-sublevels 1)))
# eval:    (add-to-list 'org-export-exclude-tags "TOC")
# eval: (progn (visual-line-mode t) (require 'ox-extra) (ox-extras-activate '(ignore-headlines)))
# compile-command: (org-latex-export-to-pdf)
# End:
